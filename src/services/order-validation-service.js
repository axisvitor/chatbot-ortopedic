const { NuvemshopService } = require('./nuvemshop-service');
const { RedisStore } = require('../store/redis-store');

class OrderValidationService {
    constructor() {
        this.nuvemshop = new NuvemshopService();
        this.redisStore = new RedisStore();
        this.MAX_ATTEMPTS = 3;
        this.BLOCK_TIME = 1800; // 30 minutos em segundos
    }

    /**
     * Verifica tentativas de valida√ß√£o do usu√°rio
     * @param {string} phoneNumber - N√∫mero do WhatsApp
     * @returns {Promise<boolean>} - Se o usu√°rio est√° bloqueado
     */
    async checkAttempts(phoneNumber) {
        const key = `validation_attempts:${phoneNumber}`;
        const attempts = await this.redisStore.get(key) || 0;
        
        if (attempts >= this.MAX_ATTEMPTS) {
            return true;
        }
        return false;
    }

    /**
     * Incrementa tentativas de valida√ß√£o
     * @param {string} phoneNumber - N√∫mero do WhatsApp
     */
    async incrementAttempts(phoneNumber) {
        const key = `validation_attempts:${phoneNumber}`;
        const attempts = await this.redisStore.get(key) || 0;
        await this.redisStore.set(key, attempts + 1, this.BLOCK_TIME);
    }

    /**
     * Reseta tentativas de valida√ß√£o
     * @param {string} phoneNumber - N√∫mero do WhatsApp
     */
    async resetAttempts(phoneNumber) {
        const key = `validation_attempts:${phoneNumber}`;
        await this.redisStore.del(key);
    }

    /**
     * Valida n√∫mero do pedido
     * @param {string} orderNumber - N√∫mero do pedido
     * @returns {Promise<Object|null>} Pedido ou null se n√£o encontrado
     */
    async validateOrderNumber(orderNumber) {
        try {
            // Remove caracteres especiais e espa√ßos
            const cleanNumber = String(orderNumber).replace(/[^0-9]/g, '');
            
            console.log('üîç Validando pedido:', {
                numero: cleanNumber,
                numeroOriginal: orderNumber,
                timestamp: new Date().toISOString()
            });

            const order = await this.nuvemshop.getOrderByNumber(cleanNumber);
            
            if (!order) {
                console.log('‚ùå Pedido n√£o encontrado:', {
                    numero: cleanNumber,
                    timestamp: new Date().toISOString()
                });
                return null;
            }

            console.log('‚úÖ Pedido validado:', {
                numero: cleanNumber,
                cliente: order.customer?.name,
                status: order.status,
                timestamp: new Date().toISOString()
            });

            // Retorna informa√ß√µes formatadas do pedido
            return this.formatSafeOrderInfo(order);
        } catch (error) {
            console.error('‚ùå Erro ao validar pedido:', {
                erro: error.message,
                numero: orderNumber,
                timestamp: new Date().toISOString()
            });
            return null;
        }
    }

    /**
     * Formata informa√ß√µes seguras do pedido
     * @param {Object} order - Pedido completo
     * @returns {Object} Informa√ß√µes seguras do pedido
     */
    formatSafeOrderInfo(order) {
        try {
            // Log do pedido original para debug
            console.log('üì¶ Pedido original:', JSON.stringify(order, null, 2));

            // Garantir que temos os dados m√≠nimos
            if (!order || !order.number) {
                throw new Error('Dados do pedido incompletos');
            }

            const orderInfo = {
                numero_pedido: order.number,
                status: order.status,
                data_compra: order.created_at ? new Date(order.created_at).toLocaleString('pt-BR') : 'N√£o dispon√≠vel',
                valor_total: order.total || 0,
                produtos: Array.isArray(order.products) ? order.products.map(product => ({
                    nome: product.name,
                    quantidade: product.quantity
                })) : [],
                status_envio: order.shipping_status || 'N√£o dispon√≠vel',
                codigo_rastreio: order.shipping_tracking_number || null,
                cliente: {
                    nome: order.customer?.name || order.client_details?.name || 'N√£o informado',
                    telefone: order.customer?.phone || order.client_details?.phone || 'N√£o informado'
                }
            };

            // Log das informa√ß√µes formatadas
            console.log('üìã Informa√ß√µes formatadas:', {
                numero: orderInfo.numero_pedido,
                cliente: orderInfo.cliente.nome,
                status: orderInfo.status,
                produtos: orderInfo.produtos.length,
                timestamp: new Date().toISOString()
            });

            return orderInfo;
        } catch (error) {
            console.error('‚ùå Erro ao formatar pedido:', {
                erro: error.message,
                stack: error.stack,
                numero: order?.number,
                timestamp: new Date().toISOString()
            });
            return null;
        }
    }

    /**
     * Formata mensagem de pedido para WhatsApp
     * @param {Object} orderInfo - Informa√ß√µes seguras do pedido
     * @returns {string} Mensagem formatada
     */
    async formatOrderMessage(orderInfo) {
        try {
            if (!orderInfo) {
                throw new Error('Informa√ß√µes do pedido n√£o dispon√≠veis');
            }

            // Log das informa√ß√µes recebidas
            console.log('üìù Formatando mensagem do pedido:', {
                numero: orderInfo.numero_pedido,
                cliente: orderInfo.cliente?.nome,
                status: orderInfo.status,
                produtos: orderInfo.produtos?.length,
                timestamp: new Date().toISOString()
            });

            let message = `üõçÔ∏è *Detalhes do Pedido #${orderInfo.numero_pedido}*\n\n`;
            message += `üë§ Cliente: ${orderInfo.cliente?.nome || 'N√£o informado'}\n`;
            message += `üìÖ Data: ${orderInfo.data_compra}\n`;
            
            // Status principal do pedido
            const statusPedido = this.nuvemshop.formatOrderStatus(orderInfo.status);
            message += `üì¶ Status: ${statusPedido}\n`;
            
            // Valor total
            message += `üí∞ Valor Total: ${this.nuvemshop.formatPrice(orderInfo.valor_total)}\n\n`;
            
            // Lista de produtos
            if (Array.isArray(orderInfo.produtos) && orderInfo.produtos.length > 0) {
                message += `*Produtos:*\n`;
                orderInfo.produtos.forEach(produto => {
                    message += `‚ñ´Ô∏è ${produto.quantidade}x ${produto.nome}\n`;
                });
            }

            // Status de envio
            const statusEnvio = this.nuvemshop.formatOrderStatus(orderInfo.status_envio);
            message += `\nüì¶ Status do Envio: ${statusEnvio}`;
            
            // C√≥digo de rastreio
            if (orderInfo.codigo_rastreio) {
                message += `\nüì¨ C√≥digo de Rastreio: ${orderInfo.codigo_rastreio}`;
                message += `\n\n_Para ver o status atual do seu pedido, digite "rastrear" ou "status da entrega"_`;
                
                // Armazena o c√≥digo de rastreio no Redis para consulta r√°pida
                if (orderInfo.cliente?.telefone) {
                    const trackingKey = `tracking:${orderInfo.cliente.telefone}`;
                    await this.redisStore.set(trackingKey, orderInfo.codigo_rastreio, 3600); // 1 hora de TTL
                    
                    console.log('üíæ C√≥digo de rastreio armazenado:', {
                        codigo: orderInfo.codigo_rastreio,
                        telefone: orderInfo.cliente.telefone,
                        chave: trackingKey,
                        timestamp: new Date().toISOString()
                    });
                }
            }

            return message;
        } catch (error) {
            console.error('‚ùå Erro ao formatar mensagem:', {
                erro: error.message,
                stack: error.stack,
                pedido: orderInfo?.numero_pedido,
                timestamp: new Date().toISOString()
            });
            return null;
        }
    }

    formatOrderTrackingResponse(trackingInfo) {
        if (!trackingInfo) return null;

        // Remove ponto e v√≠rgula extra da URL se existir
        if (trackingInfo.url) {
            trackingInfo.url = trackingInfo.url.replace(/;$/, '');
        }

        return `üöö *Status do Rastreamento*\n\n` +
            `üì¶ C√≥digo: ${trackingInfo.code}\n` +
            `üìç Status: ${trackingInfo.status}\n` +
            `üîó Link: ${trackingInfo.url}\n\n` +
            `√öltima atualiza√ß√£o: ${new Date().toLocaleString('pt-BR')}`;
    }
}

module.exports = { OrderValidationService }; 